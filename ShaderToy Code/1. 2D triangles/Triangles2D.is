struct Triangle
{
    vec2 A;
    vec2 B;
    vec2 C;
};
    
float trArea(vec2 a, vec2 b, vec2 c)
{
    return abs((a.x*(b.y-c.y) + b.x*(c.y-a.y) + c.x*(a.y-b.y))/2.0);
}

bool isInTriangle(in vec2 point, in Triangle tr)
{
    float area = trArea(tr.A, tr.B, tr.C);
    float areaP1 = trArea(point, tr.B, tr.C);
    float areaP2 = trArea(tr.A, point, tr.C);
    float areaP3 = trArea(tr.A, tr.B, point);
    
    //if area of triangle is equal to area of three subtriangles, return true
    if(area == areaP1 + areaP2 + areaP3)
        return true;
    else
        return false;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    Triangle tr;
    tr.A = vec2(0.5, 0.8);
    tr.B = vec2(0.2, 0.2);
    tr.C = vec2(0.8, 0.2);
    
    vec3 col = vec3(0.0);
    
    if(isInTriangle(uv, tr))
    {
    	// Time varying pixel color
    	col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));
    }
    // Output to screen
    fragColor = vec4(col,1.0);
}