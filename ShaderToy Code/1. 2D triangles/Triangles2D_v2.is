struct Triangle
{
	vec2 A;
    vec2 B;
    vec2 C;
};
    
float signum(vec2 p1, vec2 p2, vec2 p3)
{
    return sign((cross(vec3(p2 - p1, 0.0), vec3(p3 - p1, 0.0))).z);
}

bool inTriangle(in vec2 point, in Triangle tr)
{
    float d1, d2, d3;
    bool has_neg, has_pos;

    d1 = signum(tr.A, tr.B, point);
    d2 = signum(tr.B, tr.C, point);
    d3 = signum(tr.C, tr.A, point);

    has_neg = (d1 < 0.0) || (d2 < 0.0) || (d3 < 0.0);
    has_pos = (d1 > 0.0) || (d2 > 0.0) || (d3 > 0.0);

    return !(has_neg && has_pos);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    Triangle tr;
    //tr.A = vec2(0.5*(1.0+cos(iTime)), 0.5*(1.0+sin(iTime)));
    tr.A = vec2(0.5, 0.8);
    tr.B = vec2(0.2, 0.2);
    tr.C = vec2(0.8, 0.2);
    
    vec3 col;
    if(inTriangle(uv, tr))
    {
    	// Time varying pixel color
    	col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));
    }
    else
    {
    	col = vec3(0.0, 0.0, 0.0);
    }

    // Output to screen
    fragColor = vec4(col,1.0);
}