struct Triangle
{
    vec2 A;
    vec2 B;
    vec2 C;
};

float signum(vec2 a, vec2 b, vec2 c)
{
	//calculate vectors AB and AC from points a, b, c
    vec2 ab = b - a;
    vec2 ac = c - a;
    
	//extend 2D vectors to the 3D space
    vec3 ab_3D = vec3(ab.xy, 0.0);
    vec3 ac_3D = vec3(ac.xy, 0.0);
    
	//calculate cross product
    vec3 cross_product = cross(ab_3D, ac_3D);
    
	//return sign of z component
    return sign(cross_product.z);
}
    
bool isInTriangle(vec2 point, Triangle tr)
{
    float d1 = signum(tr.A, tr.B, point);
    float d2 = signum(tr.B, tr.C, point);
    float d3 = signum(tr.C, tr.A, point);
    
	//if all cross products face the same side, return true
    return ((d1 < 0.0) && (d2 < 0.0) && (d3 < 0.0))  ||  ((d1 > 0.0) && (d2 > 0.0) && (d3 > 0.0));   
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
   	float displacement = 0.2 * cos(iTime);
    
    Triangle tr;
    tr.A = vec2(0.5 + displacement, 0.8);
    tr.B = vec2(0.2 + displacement, 0.2);
    tr.C = vec2(0.8 + displacement, 0.2);

    vec3 col = vec3(0.0);
    
    if(isInTriangle(uv, tr))
    {
    	// Time varying pixel color
    	col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));
    }
    // Output to screen
    fragColor = vec4(col,1.0);
}