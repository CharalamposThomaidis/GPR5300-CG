struct Material
{
    vec3 color;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Sphere
{
    vec3 center;
    float radius;
    Material material;
};

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    float aspect_ratio = iResolution.x/iResolution.y;
    
    uv.x = uv.x * aspect_ratio;
    
    Sphere sph;
    sph.center = vec3(0.5, 0.5, 5.0);
    sph.center.x *= aspect_ratio;
    sph.radius = 0.3;
    
    sph.material.color = vec3(1.0, 0.0, 0.0);
    sph.material.ambient = vec3(0.1, 0.1, 0.1);
    sph.material.diffuse = vec3(0.5, 0.5, 0.5);
    sph.material.specular = vec3(0.8, 0.8, 0.8);
    sph.material.shininess = 32.0;
    
    vec3 camera = vec3(0.5, 0.5, 0.0);
    
    vec3 lightPos = vec3(10.0*sin(iTime)*0.5, 10.0*cos(iTime)*0.5, -1.0);
    vec3 lightCol = vec3(1.0);
    
    vec3 col = vec3(0.0);
    
    if(length(uv - vec2(sph.center.x, sph.center.y)) <= sph.radius)
    {
        float custom_z = sph.center.z - sqrt(pow(sph.radius, 2.0) - pow(uv.y - sph.center.y, 2.0));
        
        vec3 uv_3D = vec3(uv, custom_z);
        
        vec3 ambient = vec3(0.0);
        vec3 diffuse = vec3(0.0);
        vec3 specular = vec3(0.0);
       
        ambient = sph.material.color * sph.material.ambient * lightCol;
        
        vec3 normal = normalize(uv_3D - sph.center);
        vec3 lightDir = normalize(lightPos - uv_3D);
        
        float diff = max(dot(normal, lightDir), 0.0);
        diffuse = sph.material.color * sph.material.diffuse * lightCol * diff;
        
        vec3 viewDir = normalize(camera - uv_3D);
        vec3 reflectDir = reflect(-lightDir, normal);
        
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), sph.material.shininess);
        specular =  sph.material.color * sph.material.specular * lightCol * spec;
        
        col = ambient + diffuse + specular;
    }

    // Output to screen
    fragColor = vec4(col,1.0);
}